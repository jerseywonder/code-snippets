{
	// Example snippet for checking if a value is present in another array or string
	"contains": {
		"prefix": "contains",
		"body": [
			"function contains(a, b) {",
			"    if (Array.isArray(b)) {",
			"        return b.some(x => a.includes(x));",
			"    }",
			"    return a.includes(b);",
			"}"
		],
		"description": "Checks if a value or any value in an array is present in another array or string",
		"scope": "javascript"
	},

	// Example snippet for summing property values in an array of objects
	"sum": {
		"prefix": "sum",
		"body": [
			"function sum(arr, prop) {",
			"    return arr.reduce((total, item) => total + item[prop], 0);",
			"}"
		],
		"description": "Sums the values of a specified property in an array of objects",
		"scope": "javascript"
	},

	// Example snippet for shuffling an array
	"shuffle": {
		"prefix": "shuffle",
		"body": [
			"function shuffle(arr) {",
			"    let i = arr.length;",
			"    while (i > 0) {",
			"        const j = Math.floor(Math.random() * i);",
			"        i--;",
			"        [arr[i], arr[j]] = [arr[j], arr[i]];",
			"    }",
			"    return arr;",
			"}"
		],
		"description": "Shuffles an array in place",
		"scope": "javascript"
	},

	"resizer": {
		"prefix": "resizer",
		"body": [
			"function resizeIframe(elem=\"#gv-atom\") {",
			"    if (window.frameElement) {",
			"        const target = document.querySelector(elem);",
			"        console.log(\"Inside version 1.1\");",
			"        window.parent.postMessage({",
			"            sentinel: 'amp',",
			"            type: 'embed-size',",
			"            height: document.body.scrollHeight",
			"        }, '*');",
			"        document.body.style.overflow = 'hidden';",
			"        window.frameElement.height = target.offsetHeight;",
			"        function onElementHeightChange(elm, callback) {",
			"            let lastHeight = elm.clientHeight;",
			"            let newHeight;",
			"            (function run() {",
			"                newHeight = elm.clientHeight;",
			"                if (lastHeight !== newHeight) callback();",
			"                lastHeight = newHeight;",
			"                if (elm.onElementHeightChangeTimer) {",
			"                    clearTimeout(elm.onElementHeightChangeTimer);",
			"                }",
			"                elm.onElementHeightChangeTimer = setTimeout(run, 200);",
			"            })();",
			"        }",
			"        onElementHeightChange(document.body, function() {",
			"            window.frameElement.height = target.offsetHeight;",
			"        });",
			"    }",
			"}"
		],
		"description": "Checks if the atom is inside an iframe and does a resize",
		"scope": "javascript"
	},

	"getJson": {
		"prefix": "getJson",
		"body": [
			"function getJson(url) {",
			"  return fetch(`${url}`).then(r => r.json());",
			"}"
		],
		"description": "Fetch and parse JSON data from a URL",
		"scope": "javascript"
	},

	"mergeObjects": {
		"prefix": "mergeObjects",
		"body": [
			"function merge(to, from) {",
			"    for (const n in from) {",
			"        if (typeof to[n] != 'object') {",
			"            to[n] = from[n];",
			"        } else if (typeof from[n] == 'object') {",
			"            to[n] = merge(to[n], from[n]);",
			"        }",
			"    }",
			"    return to;",
			"};"
		],
		"description": "Deep merge two objects",
		"scope": "javascript"
	},

	"mustache": {
		"prefix": "mustache",
		"body": [
			"function mustache(template, self, parent, invert) {",
			"    var render = mustache;",
			"    var output = \"\";",
			"    var i;",
			"    function get(ctx, path) {",
			"        path = path.pop ? path : path.split(\".\");",
			"        ctx = ctx[path.shift()];",
			"        ctx = ctx != null ? ctx : \"\";",
			"        return (0 in path) ? get(ctx, path) : ctx;",
			"    }",
			"    self = Array.isArray(self) ? self : (self ? [self] : []);",
			"    self = invert ? (0 in self) ? [] : [1] : self;",
			"    for (i = 0; i < self.length; i++) {",
			"        var childCode = '';",
			"        var ctx = self[i];",
			"        var match = template.match(/{{([^{}]+)}}/);",
			"        while (match) {",
			"            var key = match[1].trim();",
			"            var val = get(ctx, key);",
			"            if (typeof val === 'function') {",
			"                val = val.call(ctx, template.slice(match.index + match[0].length), render);",
			"            }",
			"            output += template.slice(0, match.index) + (val != null ? val : '');",
			"            template = template.slice(match.index + match[0].length);",
			"            match = template.match(/{{([^{}]+)}}/);",
			"        }",
			"        output += template;",
			"    }",
			"    return output;",
			"}"
		],
		"description": "Renders a Mustache template with the given context",
		"scope": "javascript"
	},

	"mustache-example": {
		"prefix": "mustache-example",
		"body": [
			"const template = `",
			"  Hello {{name}}!",
			"  {{#if isAdult}}",
			"    You are {{age}} years old.",
			"  {{/if}}",
			"  {{#skills}}",
			"    - {{.}}",
			"  {{/skills}}",
			"`;",
			"",
			"const context = {",
			"  name: \"John\",",
			"  age: 25,",
			"  isAdult: true,",
			"  skills: [\"JavaScript\", \"HTML\", \"CSS\"]",
			"};",
			"",
			"const output = mustache(template, context);",
			"console.log(output);"
		],
		"description": "Example usage of mustache template",
		"scope": "javascript"
	},

	"Media Query Mixins": {
		"prefix": "mq",
		"body": [
			"@include mq($until: mobile) {",
			"\t$0",
			"}",
			"",
			"@include mq($from: mobile, $until: mobileLandscape) {",
			"\t",
			"}",
			"",
			"@include mq($from: mobileLandscape, $until: tablet) {",
			"\t",
			"}",
			"",
			"@include mq($from: tablet, $until: desktop) {",
			"\t",
			"}",
			"",
			"@include mq($from: desktop, $until: leftCol) {",
			"\t",
			"}",
			"",
			"@include mq($from: leftCol, $until: wide) {",
			"\t",
			"}",
			"",
			"@include mq($from: wide) {",
			"\t",
			"}"
		],
		"scope": "*"
	}
}
